-- Features

[x] Pings need sending from client/server every second
[x] Deal with players disconnecting (10 second timeout)
[x] Deal with players (re) connecting
[x] Display game URL in UI
[x] Display player info in UI
[x] Send (valid) events to clients for processing
[x] Ignore our own messages when they come back to us
[x] Rubberbanding (simple lerp)
[/] Delay processing commands by [latency]
[/] Handle disconection as client (either server rejection or socket gone pop) (I think)
[x] Ticks (especially on server side) need to be adjusted for elapsed time
[ ] Use shared clock/ticks to attempt to make commands happen at the same time server/client

[ ] Rendering needs to be function rather than straight up scene graph
  - Issue with this: Game is server/client and 'canvas' doesn't exist on the server
[x] Bullets needs to be a single entity rendering all the bullets
[x] Bullets can then send commands to entities to let them know they've been damaged..

[x] Move player mgmt logic into game itself
[x] Ship destruction means points
[ ] Ship destruction means respawn required
[ ] Will need to differentiate between player destruction/asteroid/other

[ ] Ship has regenerable shield (prolonged attack required to destroy)
[ ] Display ship health to player whose ship it is
[ ] List public games in UI for easy selection
[ ] suspend+terminate unused games
[ ] Auth (bare minimum, preferably no data needed)
[ ] Encrypted cookie for telling who somebody is
[ ] Player name != Player Id
[ ] Graceful disconnect
[ ] Admin UI (view games / players / latency / etc)
[ ] When a game doesn't exist anymore, player needs booting to the lobby
[ ] Write some tests for game behaviour when nobody is watching

-- Code

[ ] Newtypes for Game/Player... 
[ ] Break up LocalContext
[ ] Probably need to spin up the game itself in a spawnProcess on the server to avoid blocking

-- Entirely unnecessary stuff

[ ] Radar for tracking other players
[ ] Infinite background (load/render on demand (yawn))
[ ] Shaders/layers
[ ] Proper collision 
[ ] Asteroids
