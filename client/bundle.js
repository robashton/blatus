// Generated by purs bundle 0.13.2
var PS = {};
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];                          
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];               
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["lift2"] = lift2;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];                   
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];                
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  exports["Left"] = Left;
  exports["Right"] = Right;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];              
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  exports["flip"] = flip;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  };
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];                                                       
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  };
  var $$for = function (dictApplicative) {
      return function (dictTraversable) {
          return function (x) {
              return function (f) {
                  return traverse(dictTraversable)(dictApplicative)(f)(x);
              };
          };
      };
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["for"] = $$for;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Traversable = $PS["Data.Traversable"];                
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done = true;
                              return acc;
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = new Data_Functor.Functor(listMap);                 
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              var $202 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              return function ($203) {
                  return $202(f($203));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 109, column 12 - line 111, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          var $204 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
          return function ($205) {
              return $204(rev($205));
          };
      };
  });
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function (f) {
          var $219 = Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value));
          var $220 = Data_Foldable.foldl(foldableList)(function (acc) {
              var $222 = Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc);
              return function ($223) {
                  return $222(f($223));
              };
          })(Control_Applicative.pure(dictApplicative)(Nil.value));
          return function ($221) {
              return $219($220($221));
          };
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types (line 155, column 1 - line 157, column 48): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["traversableList"] = traversableList;
  exports["applicativeList"] = applicativeList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];                 
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Control_Category = $PS["Control.Category"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List (line 368, column 3 - line 368, column 19): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();                                                                                       
  var mapMaybe = function (f) {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return reverse(acc);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      var v1 = f(v.value0);
                      if (v1 instanceof Data_Maybe.Nothing) {
                          $tco_var_acc = acc;
                          $copy_v = v.value1;
                          return;
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          $tco_var_acc = new Data_List_Types.Cons(v1.value0, acc);
                          $copy_v = v.value1;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List (line 419, column 5 - line 421, column 32): " + [ v1.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.List (line 417, column 3 - line 417, column 27): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  var filter = function (p) {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return reverse(acc);
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (p(v.value0)) {
                          $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                          $copy_v = v.value1;
                          return;
                      };
                      if (Data_Boolean.otherwise) {
                          $tco_var_acc = acc;
                          $copy_v = v.value1;
                          return;
                      };
                  };
                  throw new Error("Failed pattern match at Data.List (line 390, column 3 - line 390, column 27): " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  };
  var catMaybes = mapMaybe(Control_Category.identity(Control_Category.categoryFn));
  exports["filter"] = filter;
  exports["mapMaybe"] = mapMaybe;
  exports["catMaybes"] = catMaybes;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Compactable"] = $PS["Data.Compactable"] || {};
  var exports = $PS["Data.Compactable"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];    
  var Compactable = function (compact, separate) {
      this.compact = compact;
      this.separate = separate;
  };
  var compactableList = new Compactable(Data_List.catMaybes, (function () {
      var go = function (acc) {
          return function (v) {
              if (v instanceof Data_Either.Left) {
                  return {
                      left: Control_Alt.alt(Data_List_Types.altList)(acc.left)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value0)),
                      right: acc.right
                  };
              };
              if (v instanceof Data_Either.Right) {
                  return {
                      right: Control_Alt.alt(Data_List_Types.altList)(acc.right)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value0)),
                      left: acc.left
                  };
              };
              throw new Error("Failed pattern match at Data.Compactable (line 131, column 14 - line 133, column 54): " + [ v.constructor.name ]);
          };
      };
      return Data_Foldable.foldl(Data_List_Types.foldableList)(go)({
          left: Control_Plus.empty(Data_List_Types.plusList),
          right: Control_Plus.empty(Data_List_Types.plusList)
      });
  })());
  exports["compactableList"] = compactableList;
})(PS);
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                         
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.eqStringImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["eq"] = eq;
  exports["eqString"] = eqString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Filterable"] = $PS["Data.Filterable"] || {};
  var exports = $PS["Data.Filterable"];
  var Data_Compactable = $PS["Data.Compactable"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];              
  var Filterable = function (Compactable0, Functor1, filter, filterMap, partition, partitionMap) {
      this.Compactable0 = Compactable0;
      this.Functor1 = Functor1;
      this.filter = filter;
      this.filterMap = filterMap;
      this.partition = partition;
      this.partitionMap = partitionMap;
  };
  var filterableList = new Filterable(function () {
      return Data_Compactable.compactableList;
  }, function () {
      return Data_List_Types.functorList;
  }, Data_List.filter, function (p) {
      return Data_List.mapMaybe(p);
  }, function (p) {
      return function (xs) {
          var select = function (x) {
              return function (v) {
                  var $36 = p(x);
                  if ($36) {
                      return {
                          no: v.no,
                          yes: new Data_List_Types.Cons(x, v.yes)
                      };
                  };
                  return {
                      no: new Data_List_Types.Cons(x, v.no),
                      yes: v.yes
                  };
              };
          };
          return Data_Foldable.foldr(Data_List_Types.foldableList)(select)({
              no: Data_List_Types.Nil.value,
              yes: Data_List_Types.Nil.value
          })(xs);
      };
  }, function (p) {
      return function (xs) {
          var select = function (x) {
              return function (v) {
                  var v1 = p(x);
                  if (v1 instanceof Data_Either.Left) {
                      return {
                          left: new Data_List_Types.Cons(v1.value0, v.left),
                          right: v.right
                      };
                  };
                  if (v1 instanceof Data_Either.Right) {
                      return {
                          left: v.left,
                          right: new Data_List_Types.Cons(v1.value0, v.right)
                      };
                  };
                  throw new Error("Failed pattern match at Data.Filterable (line 190, column 36 - line 192, column 83): " + [ v1.constructor.name ]);
              };
          };
          return Data_Foldable.foldr(Data_List_Types.foldableList)(select)({
              left: Data_List_Types.Nil.value,
              right: Data_List_Types.Nil.value
          })(xs);
      };
  });
  var filterMap = function (dict) {
      return dict.filterMap;
  };
  var filter = function (dict) {
      return dict.filter;
  };
  exports["filterMap"] = filterMap;
  exports["filterableList"] = filterableList;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];                                   
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
})(PS);
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.getCanvasWidth = function(canvas) {
      return function() {
          return canvas.width;
      };
  };

  exports.getCanvasHeight = function(canvas) {
      return function() {
          return canvas.height;
      };
  };

  exports.setFillStyle = function(ctx) {
      return function(style) {
          return function() {
              ctx.fillStyle = style;
          };
      };
  };

  exports.fillRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.fillRect(r.x, r.y, r.width, r.height);
          };
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.width, r.height);
          };
      };
  };

  exports.scale = function(ctx) {
      return function(t) {
          return function() {
              ctx.scale(t.scaleX, t.scaleY);
          };
      };
  };

  exports.rotate = function(ctx) {
      return function(angle) {
          return function() {
              ctx.rotate(angle);
          };
      };
  };

  exports.translate = function(ctx) {
      return function(t) {
          return function() {
              ctx.translate(t.translateX, t.translateY);
          };
      };
  };

  exports.save = function(ctx) {
      return function() {
          ctx.save();
      };
  };

  exports.restore = function(ctx) {
      return function() {
          ctx.restore();
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Graphics.Canvas"] = $PS["Graphics.Canvas"] || {};
  var exports = $PS["Graphics.Canvas"];
  var $foreign = $PS["Graphics.Canvas"];
  var Data_Maybe = $PS["Data.Maybe"];
  var withContext = function (ctx) {
      return function (action) {
          return function __do() {
              var v = $foreign.save(ctx)();
              var v1 = action();
              var v2 = $foreign.restore(ctx)();
              return v1;
          };
      };
  };
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["withContext"] = withContext;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["getCanvasWidth"] = $foreign.getCanvasWidth;
  exports["getCanvasHeight"] = $foreign.getCanvasHeight;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["fillRect"] = $foreign.fillRect;
  exports["clearRect"] = $foreign.clearRect;
  exports["scale"] = $foreign.scale;
  exports["rotate"] = $foreign.rotate;
  exports["translate"] = $foreign.translate;
  exports["save"] = $foreign.save;
  exports["restore"] = $foreign.restore;
})(PS);
(function(exports) {
  "use strict";            

  exports.cos = Math.cos;    

  exports.sin = Math.sin;  

  exports.tan = Math.tan;      

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["cos"] = $foreign.cos;
  exports["sin"] = $foreign.sin;
  exports["tan"] = $foreign.tan;
  exports["pi"] = $foreign.pi;
})(PS);
(function($PS) {
  "use strict";
  $PS["Pure.Math"] = $PS["Pure.Math"] || {};
  var exports = $PS["Pure.Math"];
  var point = function (x) {
      return function (y) {
          return {
              x: x,
              y: y
          };
      };
  };
  exports["point"] = point;
})(PS);
(function($PS) {
  "use strict";
  $PS["Pure.Camera"] = $PS["Pure.Camera"] || {};
  var exports = $PS["Pure.Camera"];
  var Data_Unit = $PS["Data.Unit"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];
  var $$Math = $PS["Math"];
  var Pure_Math = $PS["Pure.Math"];                
  var viewportFromConfig = function (config) {
      var width = config.distance * $$Math.tan(config.fieldOfView);
      var left = config.lookAt.x - width / 2.0;
      var right = left + width;
      var aspectRatio = config.target.width / config.target.height;
      var height = width / aspectRatio;
      var top = config.lookAt.y - height / 2.0;
      var bottom = top + height;
      return {
          aspectRatio: aspectRatio,
          width: width,
          height: height,
          left: left,
          top: top,
          right: right,
          bottom: bottom,
          scale: Pure_Math.point(config.target.width / width)(config.target.height / height)
      };
  };
  var setupCamera = function (target) {
      var config = {
          lookAt: Pure_Math.point(0.0)(0.0),
          distance: 1000.0,
          fieldOfView: 3.141 / 4.0,
          target: target
      };
      return {
          config: config,
          viewport: viewportFromConfig(config)
      };
  };
  var applyViewport = function (viewport) {
      return function (ctx) {
          return function __do() {
              var v = Graphics_Canvas.scale(ctx)({
                  scaleX: viewport.scale.x,
                  scaleY: viewport.scale.y
              })();
              var v1 = Graphics_Canvas.translate(ctx)({
                  translateX: -viewport.left,
                  translateY: -viewport.top
              })();
              return Data_Unit.unit;
          };
      };
  };
  exports["setupCamera"] = setupCamera;
  exports["applyViewport"] = applyViewport;
  exports["viewportFromConfig"] = viewportFromConfig;
})(PS);
(function($PS) {
  "use strict";
  $PS["Pure.Game"] = $PS["Pure.Game"] || {};
  var exports = $PS["Pure.Game"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Newtype = $PS["Data.Newtype"];
  var $$Math = $PS["Math"];                            
  var HtmlColor = function (x) {
      return x;
  };
  var EntityId = function (x) {
      return x;
  };
  var PushForward = (function () {
      function PushForward() {

      };
      PushForward.value = new PushForward();
      return PushForward;
  })();
  var PushBackward = (function () {
      function PushBackward() {

      };
      PushBackward.value = new PushBackward();
      return PushBackward;
  })();
  var TurnLeft = (function () {
      function TurnLeft() {

      };
      TurnLeft.value = new TurnLeft();
      return TurnLeft;
  })();
  var TurnRight = (function () {
      function TurnRight() {

      };
      TurnRight.value = new TurnRight();
      return TurnRight;
  })();                                              
  var tick = function (v) {
      return {
          entities: Data_Functor.map(Data_List_Types.functorList)(function (e) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(function (i) {
                  return function (v2) {
                      return v2(i);
                  };
              })(e)(e.behaviour);
          })(v.entities)
      };
  };                                   
  var ntHtmlColor = new Data_Newtype.Newtype(function (n) {
      return n;
  }, HtmlColor);
  var ntEntityId = new Data_Newtype.Newtype(function (n) {
      return n;
  }, EntityId);
  var eqEntityId = Data_Eq.eqString;
  var sendCommand = function (id) {
      return function (command) {
          return function (v) {
              return {
                  entities: Data_Functor.map(Data_List_Types.functorList)(function (e) {
                      var $29 = Data_Eq.eq(eqEntityId)(e.id)(id);
                      if ($29) {
                          return Data_Foldable.foldl(Data_List_Types.foldableList)(function (acc) {
                              return function (v2) {
                                  return v2(command)(acc);
                              };
                          })(e)(e.commandHandlers);
                      };
                      return e;
                  })(v.entities)
              };
          };
      };
  }; 
  var applyThrust = function (accel) {
      return function (maxSpeed) {
          return function (v) {
              var angle = v.rotation * $$Math.pi * 2.0;
              var xvel = $$Math.cos(angle) * accel;
              var yvel = $$Math.sin(angle) * accel;
              return {
                  id: v.id,
                  location: v.location,
                  velocity: {
                      x: v.velocity.x + xvel,
                      y: v.velocity.y + yvel
                  },
                  rotation: v.rotation,
                  renderables: v.renderables,
                  commandHandlers: v.commandHandlers,
                  behaviour: v.behaviour
              };
          };
      };
  };
  var driven = function (config) {
      return function (command) {
          return function (v) {
              if (command instanceof PushForward) {
                  return applyThrust(config.acceleration)(config.maxSpeed)(v);
              };
              if (command instanceof PushBackward) {
                  return applyThrust(-config.acceleration)(config.maxSpeed)(v);
              };
              if (command instanceof TurnLeft) {
                  return {
                      id: v.id,
                      location: v.location,
                      velocity: v.velocity,
                      rotation: v.rotation - config.turningSpeed,
                      renderables: v.renderables,
                      commandHandlers: v.commandHandlers,
                      behaviour: v.behaviour
                  };
              };
              if (command instanceof TurnRight) {
                  return {
                      id: v.id,
                      location: v.location,
                      velocity: v.velocity,
                      rotation: v.rotation + config.turningSpeed,
                      renderables: v.renderables,
                      commandHandlers: v.commandHandlers,
                      behaviour: v.behaviour
                  };
              };
              throw new Error("Failed pattern match at Pure.Game (line 89, column 3 - line 93, column 73): " + [ command.constructor.name ]);
          };
      };
  };
  var tank = function (id) {
      return function (location) {
          return {
              id: id,
              location: location,
              velocity: {
                  x: 0.0,
                  y: 0.0
              },
              rotation: 0.0,
              behaviour: Data_List_Types.Nil.value,
              commandHandlers: new Data_List_Types.Cons(driven({
                  maxSpeed: 5.0,
                  acceleration: 1.0e-2,
                  turningSpeed: 1.0e-2
              }), Data_List_Types.Nil.value),
              renderables: new Data_List_Types.Cons({
                  transform: {
                      x: -12.5,
                      y: -12.5,
                      width: 25.0,
                      height: 25.0
                  },
                  rotation: 0.0,
                  color: "#f00"
              }, Data_List_Types.Nil.value)
          };
      };
  };
  var initialModel = {
      entities: new Data_List_Types.Cons(tank("player")({
          x: 20.0,
          y: 20.0
      }), Data_List_Types.Nil.value)
  };
  exports["PushForward"] = PushForward;
  exports["PushBackward"] = PushBackward;
  exports["TurnLeft"] = TurnLeft;
  exports["TurnRight"] = TurnRight;
  exports["initialModel"] = initialModel;
  exports["sendCommand"] = sendCommand;
  exports["tick"] = tick;
  exports["ntHtmlColor"] = ntHtmlColor;
  exports["ntEntityId"] = ntEntityId;
})(PS);
(function(exports) {
  // module Signal

  function make(initial) {
    var subs = [];
    var val = initial;
    var sig = {
      subscribe: function(sub) {
        subs.push(sub);
        sub(val);
      },
      get: function() { return val; },
      set: function(newval) {
        val = newval;
        subs.forEach(function(sub) { sub(newval); });
      }
    };
    return sig;
  };

  exports.constant = make;

  exports.mapSig = function(fun) {
    return function(sig) {
      var out = make(fun(sig.get()));
      sig.subscribe(function(val) { out.set(fun(val)); });
      return out;
    };
  };


  exports.applySig = function(fun) {
    return function(sig) {
      var out = make(fun.get()(sig.get()));
      var produce = function() { out.set(fun.get()(sig.get())); };
      fun.subscribe(produce);
      sig.subscribe(produce);
      return out;
    };
  };

  exports.foldp = function(fun) {
    return function(seed) {
      return function(sig) {
        var acc = seed;
        var out = make(acc);
        sig.subscribe(function(val) {
          acc = fun(val)(acc);
          out.set(acc);
        });
        return out;
      };
    };
  };

  exports.sampleOn = function(sig1) {
    return function(sig2) {
      var out = make(sig2.get());
      sig1.subscribe(function() {
        out.set(sig2.get());
      });
      return out;
    };
  };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };
})(PS["Signal"] = PS["Signal"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Signal"] = $PS["Signal"] || {};
  var exports = $PS["Signal"];
  var $foreign = $PS["Signal"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Functor = $PS["Data.Functor"];                    
  var squigglyMap = function (dictFunctor) {
      return Data_Functor.map(dictFunctor);
  };
  var squigglyApply = function (dictApply) {
      return Control_Apply.apply(dictApply);
  };
  var functorSignal = new Data_Functor.Functor($foreign.mapSig);
  var applySignal = new Control_Apply.Apply(function () {
      return functorSignal;
  }, $foreign.applySig);
  var map4 = function (f) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return function (d) {
                      return squigglyApply(applySignal)(squigglyApply(applySignal)(squigglyApply(applySignal)(squigglyMap(functorSignal)(f)(a))(b))(c))(d);
                  };
              };
          };
      };
  };
  exports["map4"] = map4;
  exports["functorSignal"] = functorSignal;
  exports["constant"] = $foreign.constant;
  exports["foldp"] = $foreign.foldp;
  exports["sampleOn"] = $foreign.sampleOn;
  exports["runSignal"] = $foreign.runSignal;
})(PS);
(function(exports) {
  // module Signal.DOM

  exports.keyPressedP =
    function keyPressedP(constant) {
      return function(keyCode) {
        return function() {
          var out = constant(false);
          window.addEventListener("keydown", function(e) {
            if (e.keyCode === keyCode) out.set(true);
          });
          window.addEventListener("keyup", function(e) {
            if (e.keyCode === keyCode) out.set(false);
          });
          return out;
        };
      };
    };
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Signal.DOM"] = $PS["Signal.DOM"] || {};
  var exports = $PS["Signal.DOM"];
  var $foreign = $PS["Signal.DOM"];
  var Signal = $PS["Signal"];
  var keyPressed = $foreign.keyPressedP(Signal.constant);
  exports["keyPressed"] = keyPressed;
})(PS);
(function(exports) {
  // module Signal.Time

  function now() {
    var perf = typeof performance !== 'undefined' ? performance : null,
        proc = typeof process !== 'undefined' ? process : null;
    return (
      perf && (perf.now || perf.webkitNow || perf.msNow || perf.oNow || perf.mozNow) ||
      (proc && proc.hrtime && function() {
        var t = proc.hrtime();
        return (t[0] * 1e9 + t[1]) / 1e6;
      }) ||
      Date.now
    ).call(perf);
  };                

  exports.everyP = function everyP(constant) {
    return function(t) {
      var out = constant(now());
      setInterval(function() {
        out.set(now());
      }, t);
      return out;
    };
  };
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Signal.Time"] = $PS["Signal.Time"] || {};
  var exports = $PS["Signal.Time"];
  var $foreign = $PS["Signal.Time"];
  var Signal = $PS["Signal"];                  
  var second = 1000.0;  
  var every = $foreign.everyP(Signal.constant);
  exports["every"] = every;
  exports["second"] = second;
})(PS);
(function(exports) {
  /* global window */
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);
(function(exports) {
  "use strict";

  exports._requestAnimationFrame = function(fn) {
    return function(window) {
      return function() {
        return window.requestAnimationFrame(fn);
      };
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var $foreign = $PS["Web.HTML.Window"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var RequestAnimationFrameId = function (x) {
      return x;
  };
  var requestAnimationFrame = function (fn) {
      var $33 = Data_Functor.map(Effect.functorEffect)(RequestAnimationFrameId);
      var $34 = $foreign["_requestAnimationFrame"](fn);
      return function ($35) {
          return $33($34($35));
      };
  };
  exports["requestAnimationFrame"] = requestAnimationFrame;
})(PS);
(function($PS) {
  "use strict";
  $PS["Pure.Main"] = $PS["Pure.Main"] || {};
  var exports = $PS["Pure.Main"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Filterable = $PS["Data.Filterable"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Graphics_Canvas = $PS["Graphics.Canvas"];
  var $$Math = $PS["Math"];
  var Pure_Camera = $PS["Pure.Camera"];
  var Pure_Game = $PS["Pure.Game"];
  var Signal = $PS["Signal"];
  var Signal_DOM = $PS["Signal.DOM"];
  var Signal_Time = $PS["Signal.Time"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                
  var PlayerCommand = (function () {
      function PlayerCommand(value0) {
          this.value0 = value0;
      };
      PlayerCommand.create = function (value0) {
          return new PlayerCommand(value0);
      };
      return PlayerCommand;
  })();
  var renderScene = function (v) {
      return function (ctx) {
          return function __do() {
              var v1 = Data_Traversable["for"](Effect.applicativeEffect)(Data_List_Types.traversableList)(v.entities)(function (v1) {
                  return Graphics_Canvas.withContext(ctx)(function __do() {
                      var v2 = Graphics_Canvas.translate(ctx)({
                          translateX: v1.location.x,
                          translateY: v1.location.y
                      })();
                      var v3 = Graphics_Canvas.rotate(ctx)(v1.rotation * 2.0 * $$Math.pi)();
                      var v4 = Data_Traversable["for"](Effect.applicativeEffect)(Data_List_Types.traversableList)(v1.renderables)(function (v4) {
                          return Graphics_Canvas.withContext(ctx)(function __do() {
                              var v5 = Graphics_Canvas.translate(ctx)({
                                  translateX: v4.transform.x,
                                  translateY: v4.transform.y
                              })();
                              var v6 = Graphics_Canvas.rotate(ctx)(v4.rotation * 2.0 * $$Math.pi)();
                              var v7 = Graphics_Canvas.translate(ctx)({
                                  translateX: -v4.transform.x,
                                  translateY: -v4.transform.y
                              })();
                              var v8 = Graphics_Canvas.setFillStyle(ctx)(Data_Newtype.unwrap(Pure_Game.ntHtmlColor)(v4.color))();
                              var v9 = Graphics_Canvas.fillRect(ctx)(v4.transform)();
                              return Data_Unit.unit;
                          });
                      })();
                      return Graphics_Canvas.translate(ctx)({
                          translateX: -v1.location.x,
                          translateY: -v1.location.y
                      })();
                  });
              })();
              return Data_Unit.unit;
          };
      };
  };
  var render = function (v) {
      return function __do() {
          var v1 = Graphics_Canvas.clearRect(v.renderContext)({
              x: 0.0,
              y: 0.0,
              width: v.camera.config.target.width,
              height: v.camera.config.target.height
          })();
          var v2 = Graphics_Canvas.save(v.renderContext)();
          var v3 = Pure_Camera.applyViewport(v.camera.viewport)(v.renderContext)();
          var v4 = renderScene(v.game)(v.renderContext)();
          var v5 = Graphics_Canvas.restore(v.renderContext)();
          return Data_Unit.unit;
      };
  };

  //  filterMap identity $ (guard isLeft (Just $ PlayerCommand TurnLeft)) :
  //                       (guard isRight $ Just $ PlayerCommand TurnRight) : Nil
  //
  var scheduleRender = function (context) {
      return function __do() {
          var v = Web_HTML_Window.requestAnimationFrame(render(context))(context.window)();
          return Data_Unit.unit;
      };
  };
  var prepareScene = function (viewport) {
      return function (game) {
          return game;
      };
  };
  var inputSignal = Control_Apply.apply(Effect.applyEffect)(Control_Apply.apply(Effect.applyEffect)(Control_Apply.apply(Effect.applyEffect)(Data_Functor.map(Effect.functorEffect)(Signal.map4(function (l) {
      return function (u) {
          return function (r) {
              return function (d) {
                  return {
                      isLeft: l,
                      isUp: u,
                      isRight: r,
                      isDown: d
                  };
              };
          };
      };
  }))(Signal_DOM.keyPressed(37)))(Signal_DOM.keyPressed(38)))(Signal_DOM.keyPressed(39)))(Signal_DOM.keyPressed(40));
  var tickSignal = Data_Functor.map(Effect.functorEffect)(Signal.sampleOn(Signal_Time.every(Signal_Time.second / 30.0)))(inputSignal);
  var handleCommand = function (game) {
      return function (external) {
          return Pure_Game.sendCommand(Data_Newtype.wrap(Pure_Game.ntEntityId)("player"))(external.value0)(game);
      };
  };

  // Why didn't 'guard' work? :S
  var gatherCommandsFromInput = function (v) {
      return Data_Filterable.filterMap(Data_Filterable.filterableList)(Control_Category.identity(Control_Category.categoryFn))(new Data_List_Types.Cons((function () {
          if (v.isLeft) {
              return Data_Maybe.Just.create(new PlayerCommand(Pure_Game.TurnLeft.value));
          };
          return Data_Maybe.Nothing.value;
      })(), new Data_List_Types.Cons((function () {
          if (v.isRight) {
              return Data_Maybe.Just.create(new PlayerCommand(Pure_Game.TurnRight.value));
          };
          return Data_Maybe.Nothing.value;
      })(), new Data_List_Types.Cons((function () {
          if (v.isDown) {
              return Data_Maybe.Just.create(new PlayerCommand(Pure_Game.PushBackward.value));
          };
          return Data_Maybe.Nothing.value;
      })(), new Data_List_Types.Cons((function () {
          if (v.isUp) {
              return Data_Maybe.Just.create(new PlayerCommand(Pure_Game.PushForward.value));
          };
          return Data_Maybe.Nothing.value;
      })(), Data_List_Types.Nil.value)))));
  };
  var tickContext = function (input) {
      return function (v) {
          var viewport = Pure_Camera.viewportFromConfig(v.camera.config);
          var updatedContext = {
              camera: {
                  config: v.camera.config,
                  viewport: viewport
              },
              canvasElement: v.canvasElement,
              game: v.game,
              renderContext: v.renderContext,
              window: v.window
          };
          return {
              renderContext: updatedContext.renderContext,
              canvasElement: updatedContext.canvasElement,
              camera: updatedContext.camera,
              window: updatedContext.window,
              game: Pure_Game.tick(Data_Foldable.foldl(Data_List_Types.foldableList)(handleCommand)(v.game)(gatherCommandsFromInput(input)))
          };
      };
  };
  var main = function __do() {
      var v = Graphics_Canvas.getCanvasElementById("target")();
      if (v instanceof Data_Maybe.Just) {
          var v1 = Web_HTML.window();
          var v2 = Graphics_Canvas.getContext2D(v.value0)();
          var v3 = Graphics_Canvas.getCanvasWidth(v.value0)();
          var v4 = Graphics_Canvas.getCanvasHeight(v.value0)();
          var v5 = tickSignal();
          var camera = Pure_Camera.setupCamera({
              width: v3,
              height: v4
          });
          var context = Signal.foldp(tickContext)({
              renderContext: v2,
              canvasElement: v.value0,
              camera: camera,
              window: v1,
              game: Pure_Game.initialModel
          })(v5);
          return Signal.runSignal(Data_Functor.map(Signal.functorSignal)(scheduleRender)(context))();
      };
      if (v instanceof Data_Maybe.Nothing) {
          return Data_Unit.unit;
      };
      throw new Error("Failed pattern match at Pure.Main (line 51, column 3 - line 63, column 19): " + [ v.constructor.name ]);
  };
  exports["inputSignal"] = inputSignal;
  exports["tickSignal"] = tickSignal;
  exports["main"] = main;
  exports["tickContext"] = tickContext;
  exports["PlayerCommand"] = PlayerCommand;
  exports["handleCommand"] = handleCommand;
  exports["gatherCommandsFromInput"] = gatherCommandsFromInput;
  exports["scheduleRender"] = scheduleRender;
  exports["prepareScene"] = prepareScene;
  exports["render"] = render;
  exports["renderScene"] = renderScene;
})(PS);
PS["Pure.Main"].main();